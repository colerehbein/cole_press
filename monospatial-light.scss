/* Main SCSS file for the Light Monospace Theme */

/*-- scss:uses --*/
// This section is for Sass @use rules. It's processed first.
// Use this to load external Sass libraries or your own Sass modules
// before any functions, variables, or mixins are defined or used.
// Example:
// @use 'sass:math'; // Make Sass math functions available
// @use 'path/to/my-internal-module' as internal; // Load a custom module
// For this theme, we might use it if we broke our theme into modules:
// @use 'theme-modules/colors' as colors;
// @use 'theme-modules/typography' as typography;

/*-- scss:functions --*/
// Define custom Sass functions here. These are processed after @use
// rules but before variable defaults and mixins.
// Functions are useful for calculations, color manipulations, etc.
// Example: Function to convert pixels to rems based on $font-size-base
// @function px-to-rem($px-value) {
// @if unitless($px-value) {
// @return math.div($px-value, 16) * 1rem;
// Assuming 16px base if $font-size-base not available yet
// } @else {
// @error "Function px-to-rem expects a unitless number.";
// }
// }
// Example: Function to slightly darken a color for hover states
// @function subtle-darken($color, $amount: 5%) {
// @return darken($color, $amount);
// }
// For this theme, potential functions could:
// - Calculate line heights or margins based on font metrics for grid alignment.
// - Generate slightly varied background colors for UI elements based on $mono-bg.

/*-- scss:defaults --*/
// Define default values for Sass variables here.
// These are processed *after* functions but *before* Bootstrap's variables,
// allowing you to override Bootstrap defaults effectively.
// Variables defined later in the Quarto theme list override earlier ones.

// 1. Font Integration

// Method B: Self-Hosted (Requires _fonts.scss partial, see below)
$web-font-path: "" !default; // Prevent default Bootswatch fonts

// 2. Define Custom Color Palette (Light)
$mono-bg: #ffffff;
$mono-text: #212529; // Bootstrap default dark text
$mono-accent: #0d6efd; // Bootstrap default blue
$mono-secondary: #6c757d; // Bootstrap default secondary
$mono-code-bg: #f8f9fa; // Bootstrap default light gray
$mono-border: #dee2e6; // Bootstrap default border color
$mono-header: #333333; // A dark gray example

// 3. Bootstrap & Quarto Variable Overrides
$font-family-base: "Anonymous Pro", monospace !default;
$font-family-monospace: "Anonymous Pro", monospace !default;
$font-size-base: 0.95rem !default; // Slightly smaller base size
$line-height-base: 1.45 !default; // Slightly tighter line height

// Assign your color to the navbar background variable
// $navbar-bg: $mono-header; // Replaced with dynamic gradient below

// You might also want to adjust the foreground (text/link) color
// for better contrast against the new background.
// Quarto often computes this automatically, but you can override it:
//$my-header-text-color: #f0f0f0; // A light gray example
//$navbar-fg: $my-header-text-color;

// Optionally, adjust the hover/highlight color for navbar links
//$my-header-highlight: #cccccc; // A lighter gray for hover
//$navbar-hl: $my-header-highlight;

$body-bg: $mono-bg;
$body-color: $mono-text;
$link-color: $mono-accent;
$primary: $mono-accent; // Align primary color with links
$secondary: $mono-secondary;
$border-color: $mono-border;

$headings-font-family: inherit !default; // Use base font
$headings-font-weight: 700 !default; // Use bold weight
$headings-color: inherit !default; // Use body text color

$border-radius: 0 !default; // Remove rounded corners globally

// Quarto Code Block Variables
$code-block-bg: $mono-code-bg;
$code-color: $mono-text;
$code-block-border-left: false !default; // No left border
$code-block-bg-padding: 1em !default; // Generous padding

// Quarto Inline Code Variables
$code-bg: darken($mono-bg, 3%); // Subtle background difference
$code-color: $mono-text;

// Quarto Callout Variables (Example: Note)
$callout-color-note: $mono-accent;
$callout-border-width: 3px;

/*-- scss:mixins --*/
// Define custom Sass mixins here. Processed after variables but before rules.
// Mixins allow you to encapsulate reusable blocks of CSS styles.
// Example: Mixin for consistent button styling
// @mixin mono-button-style {
// border-radius: $border-radius; // Use our theme variable
// padding: 0.5em 1em;
// font-weight: 700;
// text-decoration: none;
// border: 1px solid transparent; // Base border
// &:hover, &:focus {
// text-decoration: underline;
// }
// }
// Example: Mixin for applying focus styles consistently
// @mixin focus-style($outline-color: $mono-accent) {
// &:focus {
// outline: 2px solid $outline-color;
// outline-offset: 2px;
// box-shadow: 0 0 0 3px rgba($outline-color, 0.25);
// Optional softer glow
// }
// }
// For this theme, potential mixins could:
// - Apply the blockquote style defined in rules.
// - Create consistent styling for cards or other components (zero radius, borders).
// - Define responsive typography adjustments.
// - Encapsulate the heading styles (margins, border).

/*-- scss:rules --*/
// Define standard CSS rules here. Processed last, after Bootstrap's rules
// and any rules from themes listed earlier in the YAML.
// Use this for specific element styling not covered by variables or mixins.

// Import @font-face rules if self-hosting (Method B)
@import "fonts"; // Assumes _fonts.scss exists

// ------------------------------------------------------------------
// Navbar styling
// ------------------------------------------------------------------
// Instead of a fully animated rainbow, give the navbar a subtle monochrome
// appearance with a thin accent strip at the bottom.

// Subtle gradient strip
.navbar {
  background-color: #000;
  border-bottom: 4px solid transparent;
  background-image: linear-gradient(
    to right,
    #ff6b6b,
    #f8e71c,
    #00c9a7,
    #4dabf7,
    #a66dd4
  );
  background-size: 100% 4px;
  background-position: bottom;
  background-repeat: no-repeat;

  .navbar-brand,
  .nav-link {
    color: #ffffff !important; // Ensure contrast
  }

  .nav-link:hover,
  .nav-link:focus {
    color: #e0e0e0 !important;
  }
}

// Custom CSS Rules for Light Theme

// Basic heading spacing and bottom border
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-top: 1.8em;
  margin-bottom: 0.6em;
  padding-bottom: 0.2em;
  border-bottom: 1px solid $mono-border;
}

// Custom blockquote style inspired by Terminal CSS
blockquote {
  border-left: 4px solid $mono-accent;
  padding: 0.8em 1.2em;
  margin: 1.5em 0;
  background-color: $mono-code-bg;
  font-style: italic;
  color: $mono-secondary;

  p {
    margin-bottom: 0.5em;
  }
  p:last-child {
    margin-bottom: 0;
  }

  footer {
    margin-top: 0.8em;
    font-style: normal;
    font-size: 0.9em;
    color: lighten($mono-secondary, 15%);
  }
}

// Custom horizontal rule
hr {
  border: none;
  border-top: 2px solid $mono-border;
  margin: 2.5em 0;
  height: 0;
}

// Ensure links are clearly interactive
a {
  text-decoration: none; // Cleaner look
  font-weight: 700; // Make links slightly bolder
}
a:hover,
a:focus {
  text-decoration: underline;
  // Add outline for focus visibility if needed
  // outline: 2px solid $mono_accent;
  // outline-offset: 2px;
}

// Basic table styling for consistency
.table {
  border-collapse: collapse;
  width: 100%;
  margin-bottom: 1rem;
}
.table th,
.table td {
  border: 1px solid $mono-border;
  padding: 0.6em 0.8em;
  text-align: left;
  vertical-align: top;
}
.table thead th {
  vertical-align: bottom;
  border-bottom-width: 2px;
  font-weight: 700;
}

// Example of using a button mixin (if defined above)
// .btn-custom {
// @include mono-button-style;
// background-color: $mono-accent;
// color: $mono-bg;
// border-color: $mono-accent;
//
// &:hover, &:focus {
// background-color: darken($mono-accent, 8%);
// border-color: darken($mono-accent, 10%);
// }
// }

.card {
  border-radius: 0;
  border: 1px solid $mono-border;
  background-color: $mono-code-bg;
}

#navcards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 1rem;
}

.hero {
  background-color: $mono-code-bg;
  border: 1px solid $mono-border;
  padding: 4rem 1rem;
  text-align: center;
  margin-bottom: 2rem;
}
