---
description: 
globs: *.qmd
alwaysApply: false
---
TITLE: Previewing Quarto Project Locally (Bash)
DESCRIPTION: This Bash command is used to preview a Quarto project locally. Executing `quarto preview` starts a local web server that renders the Quarto documents (e.g., website, dashboard) and allows real-time viewing in a web browser, automatically refreshing upon file changes. This is essential for development and debugging.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/brand/brand-simple/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
quarto preview
```

----------------------------------------

TITLE: Previewing Quarto Project Locally with Bash
DESCRIPTION: This bash command is used to locally preview a Quarto project. Running `quarto preview` in the project directory will render the Quarto documents and open a local server to display the output, allowing for real-time development feedback.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/brand/brand-simple-dark-mode/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
quarto preview
```

----------------------------------------

TITLE: Rendering Quarto Document (Bash)
DESCRIPTION: This command renders the specified Quarto document (`py-plotly-in-pdf.qmd`) into its target formats (HTML and PDF), using the configured environment and installed packages. It processes the .qmd file to generate the final output documents.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/multi-format/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
quarto render .\py-plotly-in-pdf.qmd
```

----------------------------------------

TITLE: Setting up Python Environment for Quarto Examples (Bash)
DESCRIPTION: These commands set up a Python virtual environment, activate it, and install required packages from `requirements.txt`. This ensures a clean and isolated environment for running the Quarto examples, managing dependencies effectively.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/multi-format/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
python -m venv venv
source venv/bin/activate # or venv\Scripts\activate on Windows
python -m pip install -r requirements.txt
```

----------------------------------------

TITLE: Quarto Child Document for Dynamic Tab Content (R)
DESCRIPTION: This code snippet from a Quarto child document (`_child.qmd`) demonstrates how to dynamically generate content for a tabset panel. It uses an inline R expression for the tab title and an R chunk to filter `starwars` data by `homeworld` and create a `gt` table, with `echo: false` to hide the R code in the output.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/tabsets/tabsets-from-r-chunks/README.md#_snippet_1

LANGUAGE: Markdown
CODE:
```
## `r hw`


```{r}
#| echo: false
starwars %>%
  filter(homeworld == hw) %>%
  count(sex) %>%
  head() %>%
  gt()
```
```

----------------------------------------

TITLE: Quarto Tabset Panel Structure with R Chunks
DESCRIPTION: This snippet illustrates the basic Markdown structure for creating a tabset panel in Quarto, where each tab's content is generated by an R code chunk. It shows how to define individual tabs and embed R code within them to produce dynamic content.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/tabsets/tabsets-from-r-chunks/README.md#_snippet_0

LANGUAGE: Markdown
CODE:
```
# Tables

::: {.panel-tabset}

## homeworld1 

```{r}
# code with gt table on data filtered on homeworld1
```


## homeworld2

```{r}
# same code for gt table but on data filtered on homeworld2
```


... and so on for all homeworld

:::
```

----------------------------------------

TITLE: Configuring Quarto Brand Files in YAML
DESCRIPTION: This YAML snippet from `_quarto.yml` demonstrates how to specify separate brand configuration files for light and dark modes in a Quarto project. The `light` property points to `_brand.yml` for the default theme, while `dark` points to `_brand-dark.yml` for the dark theme.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/brand/brand-simple-dark-mode/README.md#_snippet_0

LANGUAGE: yaml
CODE:
```
brand:
  light: _brand.yml
  dark: _brand-dark.yml
```

----------------------------------------
TITLE: Setting Default Collapse for Quarto Callouts in Lua
DESCRIPTION: This Lua filter function `Callout` modifies Quarto callout elements. It checks if the output format is HTML and, if so, ensures that the `collapse` property of the callout element (`el`) is set to `true` if it's not already defined. This makes callouts collapsible by default in HTML documents generated by Quarto 1.3+.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/callouts/collapse-default/README.md#_snippet_0

LANGUAGE: Lua
CODE:
```
function Callout(el)
  if quarto.doc.isFormat("html") then
    -- Set default collapse to true if unset
    if not el.collapse then
      el.collapse = true
    end
    return el
  end
end
```

----------------------------------------

TITLE: Defining Quarto Project Branding (YAML)
DESCRIPTION: This YAML snippet defines the branding configuration for a Quarto project, stored in `_brand.yml`. It specifies a color palette, background and foreground colors, a primary color, the path to a logo image, and typography settings including font families sourced from Google Fonts. This configuration ensures consistent visual branding across all generated Quarto outputs.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/brand/brand-simple/README.md#_snippet_0

LANGUAGE: yaml
CODE:
```
color:
  palette:
    dark-grey: "#222222"
    blue: "#ddeaf1"
  background: blue
  foreground: dark-grey
  primary: black

logo: 
  medium: logo.png

typography:
  fonts:
    - family: Jura
      source: google
  base: Jura
  headings: Jura
```

----------------------------------------

TITLE: Configuring Custom MathJax 2 in Quarto HTML (YAML)
DESCRIPTION: This YAML configuration snippet specifies a custom MathJax 2 URL for rendering mathematical equations in Quarto's HTML output. It sets the `html-math-method` to 'mathjax' and provides a direct URL to the MathJax 2 library, enabling features like newline support (\\) in equations that are not yet fully supported in MathJax 3.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/html-math/README.md#_snippet_0

LANGUAGE: YAML
CODE:
```
format:
  html:
    html-math-method:
      method: mathjax
      url: "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/latest.js?config=TeX-MML-AM_CHTML"
```

----------------------------------------

TITLE: Defining Dark Brand Styles in YAML
DESCRIPTION: This YAML configuration from `_brand-dark.yml` defines the styling for the dark brand theme. It reuses the color palette but inverts the background and foreground colors (dark background, light foreground), sets a primary white color, includes the same logo, and maintains the 'Jura' font for consistency.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/brand/brand-simple-dark-mode/README.md#_snippet_2

LANGUAGE: yaml
CODE:
```
color:
  palette:
    dark-grey: "#222222"
    blue: "#ddeaf1"
  background: dark-grey
  foreground: blue
  primary: white

logo: 
  medium: logo.png

typography:
  fonts:
    - family: Jura
      source: google
  base: Jura
  headings: Jura
```

----------------------------------------

TITLE: Defining Light Brand Styles in YAML
DESCRIPTION: This YAML configuration from `_brand.yml` defines the styling for the light brand theme. It sets a color palette, specifies a light background and dark foreground, defines a primary black color, includes a logo, and sets the 'Jura' font for all text and headings.
SOURCE: https://github.com/quarto-dev/quarto-examples/blob/main/brand/brand-simple-dark-mode/README.md#_snippet_1

LANGUAGE: yaml
CODE:
```
color:
  palette:
    dark-grey: "#222222"
    blue: "#ddeaf1"
  background: blue
  foreground: dark-grey
  primary: black

logo: 
  medium: logo.png

typography:
  fonts:
    - family: Jura
      source: google
  base: Jura
  headings: Jura
```
